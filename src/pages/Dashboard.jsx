import React, { useState, useEffect } from 'react'
import Header from '../components/Header/Header'
import StatsCards from '../components/StatsCards/StatsCards'
import TransactionForm from '../components/TransactionForm/TransactionForm'
import TransactionList from '../components/TransactionList/TransactionList'

const Dashboard = () => {
  const [transactions, setTransactions] = useState([])
  const [balance, setBalance] = useState(0)
  const [totalIncome, setTotalIncome] = useState(0)
  const [totalExpenses, setTotalExpenses] = useState(0)

  // –ó–∞–≥—Ä—É–∑–∫–∞ –∏–∑ localStorage
  useEffect(() => {
    const saved = localStorage.getItem('fincopilka-transactions')
    if (saved) {
      const parsed = JSON.parse(saved)
      setTransactions(parsed)
      calculateTotals(parsed)
    }
  }, [])

  // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ localStorage
  useEffect(() => {
    localStorage.setItem('fincopilka-transactions', JSON.stringify(transactions))
    calculateTotals(transactions)
  }, [transactions])

  const calculateTotals = (transactions) => {
    const income = transactions
      .filter(t => t.type === 'income')
      .reduce((sum, t) => sum + t.amount, 0)
    
    const expenses = transactions
      .filter(t => t.type === 'expense')
      .reduce((sum, t) => sum + t.amount, 0)

    setTotalIncome(income)
    setTotalExpenses(expenses)
    setBalance(income - expenses)
  }

  const addTransaction = (amount, type, category, description) => {
    const newTransaction = {
      id: Date.now(),
      amount: Number(amount),
      type,
      category,
      description: description || category,
      date: new Date().toLocaleDateString('ru-RU'),
      time: new Date().toLocaleTimeString('ru-RU', { hour: '2-digit', minute: '2-digit' })
    }
    
    setTransactions(prev => [newTransaction, ...prev])
  }

  const deleteTransaction = (id) => {
    setTransactions(prev => prev.filter(t => t.id !== id))
  }

  const categories = {
    income: ['–ó–∞—Ä–ø–ª–∞—Ç–∞', '–°—Ç–∏–ø–µ–Ω–¥–∏—è', '–ü–æ–¥—Ä–∞–±–æ—Ç–∫–∞', '–ü–æ–¥–∞—Ä–æ–∫', '–ü—Ä–æ—á–µe'],
    expense: ['–ï–¥–∞', "–°—É–ø–µ—Ä–º–∞—Ä–∫–µ—Ç—ã", '–§–∞—Å—Ç—Ñ—É–¥', '–°–∞–ª–æ–Ω –∫—Ä–∞—Å–æ—Ç—ã', '–ö–∏–Ω–æ –∏ —Ç–µ–∞—Ç—Ä—ã', '–¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç', '–†–∞–∑–≤–ª–µ—á–µ–Ω–∏—è', '–û–¥–µ–∂–¥–∞', '–ñ–∏–ª—å–µ', '–ó–¥–æ—Ä–æ–≤—å–µ', '–û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ', '–ü—Ä–æ—á–µ–µ']
  }

  const categoryIcons = {
    '–ó–∞—Ä–ø–ª–∞—Ç–∞': 'üíº', '–°—Ç–∏–ø–µ–Ω–¥–∏—è': 'üéì', '–ü–æ–¥—Ä–∞–±–æ—Ç–∫–∞': 'üíª', '–ü–æ–¥–∞—Ä–æ–∫': 'üéÅ', '–ü—Ä–æ—á–µ–µ': 'üí∞',
    '–ï–¥–∞': 'ü•™', '–§–∞—Å—Ç—Ñ—É–¥': 'üçï', '–°—É–ø–µ—Ä–º–∞—Ä–∫–µ—Ç—ã': 'üõí', '–¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç': 'üöó', '–ö–∏–Ω–æ –∏ —Ç–µ–∞—Ç—Ä—ã': 'üé¨',
    '–†–∞–∑–≤–ª–µ—á–µ–Ω–∏—è': 'ü•≥', '–û–¥–µ–∂–¥–∞': 'üëï', '–ñ–∏–ª—å–µ': 'üè†', '–ó–¥–æ—Ä–æ–≤—å–µ': 'üè•', '–û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ': 'üìö',
    '–°–∞–ª–æ–Ω –∫—Ä–∞—Å–æ—Ç—ã': 'üíá', '–ü—Ä–æ—á–µ–µ': 'üì¶'
  }

  const categoryCodeMCC = {
    '–ó–∞—Ä–ø–ª–∞—Ç–∞': 'MCC: 9399 (–ì–æ—Å—É—Å–ª—É–≥–∏)', '–°—Ç–∏–ø–µ–Ω–¥–∏—è': 'MCC: 8299 (–û–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω—ã–µ —É—Å–ª—É–≥–∏)',
    '–ü–æ–¥—Ä–∞–±–æ—Ç–∫–∞': 'MCC: 7399 (–ë–∏–∑–Ω–µ—Å —É—Å–ª—É–≥–∏)', '–ü–æ–¥–∞—Ä–æ–∫': 'MCC: 5947 (–ü–æ–¥–∞—Ä–∫–∏)',
    '–°—É–ø–µ—Ä–º–∞—Ä–∫–µ—Ç—ã': 'MCC: 5411 (–°—É–ø–µ—Ä–º–∞—Ä–∫–µ—Ç—ã)', '–§–∞—Å—Ç—Ñ—É–¥': 'MCC: 5814 (–§–∞—Å—Ç—Ñ—É–¥)',
    '–ï–¥–∞': 'MCC: 5499 (–ü—Ä–æ–¥—É–∫—Ç—ã)', '–¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç': 'MCC: 4111 (–¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç)',
    '–ö–∏–Ω–æ –∏ —Ç–µ–∞—Ç—Ä—ã': 'MCC: 7832 (–ö–∏–Ω–æ—Ç–µ–∞—Ç—Ä—ã)', '–†–∞–∑–≤–ª–µ—á–µ–Ω–∏—è': 'MCC: 7999 (–†–∞–∑–≤–ª–µ—á–µ–Ω–∏—è)',
    '–û–¥–µ–∂–¥–∞': 'MCC: 5651 (–û–¥–µ–∂–¥–∞)', '–ñ–∏–ª—å–µ': 'MCC: 6513 (–ê—Ä–µ–Ω–¥–∞ –∂–∏–ª—å—è)',
    '–ó–¥–æ—Ä–æ–≤—å–µ': 'MCC: 8011 (–ú–µ–¥–∏—Ü–∏–Ω—Å–∫–∏–µ —É—Å–ª—É–≥–∏)', '–û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ': 'MCC: 8299 (–û–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω—ã–µ —É—Å–ª—É–≥–∏)',
    '–°–∞–ª–æ–Ω –∫—Ä–∞—Å–æ—Ç—ã': 'MCC: 7230 (–ü–∞—Ä–∏–∫–º–∞—Ö–µ—Ä—Å–∫–∏–µ)', '–ü—Ä–æ—á–µ–µ': 'MCC: 9399 (–ü—Ä–æ—á–∏–µ —É—Å–ª—É–≥–∏)'
  }

  return (
    <div className="min-h-screen bg-gradient-to-br from-blue-50 to-indigo-100">
      <Header balance={balance} />
      
      <div className="max-w-4xl mx-auto px-4 py-8">
        <StatsCards 
          totalIncome={totalIncome}
          totalExpenses={totalExpenses}
          balance={balance}
        />

        <TransactionForm 
          onAddTransaction={addTransaction} 
          categories={categories}
        />

        <TransactionList 
          transactions={transactions}
          onDeleteTransaction={deleteTransaction}
          categoryIcons={categoryIcons}
          categoryCodeMCC={categoryCodeMCC}
        />
      </div>
    </div>
  )
}

export default Dashboard